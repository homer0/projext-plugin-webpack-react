[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/index.js",
    "content": "const ProjextReactPlugin = require('./plugin');\n/**\n * This is the method called by projext when loading the plugin. It takes care of creating\n * a new instance of the plugin class and use it to register for the required events.\n * @param {Projext} app The projext main container.\n * @ignore\n */\nconst loadPlugin = (app) => {\n  const plugin = new ProjextReactPlugin();\n  plugin.register(app);\n};\n\nmodule.exports = loadPlugin;\n",
    "static": true,
    "longname": "/Users/homer0/CODE/Node/projext/projext-plugin-webpack-react/src/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "function",
    "name": "loadPlugin",
    "memberof": "src/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/index.js~loadPlugin",
    "access": "public",
    "export": true,
    "importPath": "projext-plugin-webpack-react",
    "importStyle": "loadPlugin",
    "description": "This is the method called by projext when loading the plugin. It takes care of creating\na new instance of the plugin class and use it to register for the required events.",
    "lineNumber": 8,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "Projext"
        ],
        "spread": false,
        "optional": false,
        "name": "app",
        "description": "The projext main container."
      }
    ],
    "return": null
  },
  {
    "__docId__": 50,
    "kind": "file",
    "name": "src/plugin.js",
    "content": "/**\n * This service is in charge of modifying a target Babel and entry settings in order to build\n * React code. It also manages the settings related to the React Hot Loader.\n */\nclass ProjextReactPlugin {\n  /**\n   * Class constructor.\n   * @ignore\n   */\n  constructor() {\n    /**\n     * The name of the reducer event the service will listen in order to intercept the rules for\n     * JS files and update them.\n     * @type {string}\n     */\n    this.jsRulesEvent = 'webpack-js-rules-configuration';\n    /**\n     * The name of the reducer event the service will listen in order to intercept the rules for\n     * SCSS files and update them.\n     * @type {string}\n     */\n    this.scssRulesEvent = 'webpack-scss-rules-configuration';\n    /**\n     * The name of the reducer event the service will listen in order to intercept the rules for\n     * css files and update them.\n     * @type {string}\n     */\n    this.cssRulesEvent = 'webpack-css-rules-configuration';\n    /**\n     * The name of the reducer event the service will listen in order to intercept the rules for\n     * fonts files, and if the target implements SSR, update them.\n     * @type {string}\n     */\n    this.fontsRulesEvent = 'webpack-fonts-rules-configuration';\n    /**\n     * The name of the reducer event the service will listen in order to intercept the rules for\n     * images files, and if the target implements SSR, update them.\n     * @type {string}\n     */\n    this.imagesRulesEvent = 'webpack-images-rules-configuration';\n    /**\n     * The name of the reducer event the service will listen for and use to update a target entry\n     * settings if the target `hot` property is `true`.\n     * @type {string}\n     */\n    this.targetEventName = 'webpack-browser-development-configuration';\n    /**\n     * The required value a target `framework` setting needs to have in order for the service to\n     * take action.\n     * @type {string}\n     */\n    this.frameworkProperty = 'react';\n    /**\n     * The default values for the options a target can use to customize how the plugin works.\n     * @type {Object}\n     * @property {Array} ssr A list of other targets being used for SSR (Server Side Rendering) and\n     *                       which paths should be included by processing the JSX.\n     */\n    this.frameworkOptions = {\n      ssr: [],\n    };\n    /**\n     * The name of the Babel preset the service will insert into the targets configurations.\n     * @type {string}\n     */\n    this.presetName = 'react';\n    /**\n     * The name of the Babel plugin the service will insert into the targets configurations if\n     * the target `hot` property is `true`\n     * @type {string}\n     */\n    this.hotPluginName = 'react-hot-loader/babel';\n    /**\n     * The name of the entry the service will insert into the target if the target `hot` property\n     * is `true`.\n     * @type {string}\n     */\n    this.hotEntry = 'react-hot-loader/patch';\n    /**\n     * The name of the loader with the Babel configurations.\n     * @type {string}\n     */\n    this.babelLoaderName = 'babel-loader';\n  }\n  /**\n   * This is the method called when the plugin is loaded by projext. It just gets the events service\n   * and registers the listeners for the reducer events that handle the JS rules, fonts rules,\n   * images rules and target configuration.\n   * @param {Projext} app The projext main container.\n   */\n  register(app) {\n    const events = app.get('events');\n    // Add the listener for the JS files rules event.\n    events.on(this.jsRulesEvent, (rules, params) => (\n      this.updateJSRules(rules, params.target, app.get('targets'))\n    ));\n    // Add the listener for the SCSS files rules event.\n    events.on(this.scssRulesEvent, (rules, params) => (\n      this.updateStylesRules(rules, params.target, app.get('targets'))\n    ));\n    // Add the listener for the CSS files rules event.\n    events.on(this.cssRulesEvent, (rules, params) => (\n      this.updateStylesRules(rules, params.target, app.get('targets'))\n    ));\n    // Add the listener for the font files rules event.\n    events.on(this.fontsRulesEvent, (rules, params) => (\n      this.updateFontsRules(rules, params.target, app.get('targets'))\n    ));\n    // Add the listener for the font files rules event.\n    events.on(this.imagesRulesEvent, (rules, params) => (\n      this.updateImagesRules(rules, params.target, app.get('targets'))\n    ));\n    // Add the listener for the target configuration event.\n    events.on(\n      this.targetEventName,\n      (config, params) => this.updateTargetConfiguration(config, params.target)\n    );\n  }\n  /**\n   * This method gets called when projext reduces the JS rules of a target. It validates the target\n   * settings and makes the necessary modifications to the Babel loader configuration.\n   * @param {Array}   currentRules The list of JS rules for the webpack configuration.\n   * @param {Target}  target       The target information.\n   * @param {Targets} targets      The targets service, to get the information of targets the\n   *                               one being processed may need for SSR.\n   * @return {Array} The updated list of rules.\n   */\n  updateJSRules(currentRules, target, targets) {\n    let updatedRules;\n    // If the target `framework` setting is the right one...\n    if (target.framework === this.frameworkProperty) {\n      // ...copy the list of rules.\n      updatedRules = currentRules.slice();\n      // Get the first rule of the list (there's usually only one).\n      const [baseJSRule] = updatedRules;\n      // Get the index of the Babel loader.\n      const babelLoaderIndex = this._findBabelLoaderIndex(baseJSRule.use);\n      // If the Babel loader is preset...\n      if (babelLoaderIndex > -1) {\n        // ...get the framework options for the target.\n        const options = this._getTargetOptions(target);\n        // Push the paths for SSR targets\n        baseJSRule.include.push(...options.ssr.map((name) => {\n          const targetInfo = targets.getTarget(name);\n          return new RegExp(targetInfo.folders.source);\n        }));\n\n        // ...replace it with an updated version.\n        baseJSRule.use[babelLoaderIndex] = this._updateBabelLoader(\n          baseJSRule.use[babelLoaderIndex],\n          target.hot\n        );\n      }\n    } else {\n      // ...otherwise, just set to return the received rules.\n      updatedRules = currentRules;\n    }\n\n    // Return the updated rules\n    return currentRules;\n  }\n  /**\n   * This method gets called when projext reduces the stylesheet (for both SCSS and CSS) rules of a\n   * target. It validates the target settings, and if the target implements SSR, it adds the\n   * `include` setting on the rule for the SSR targets directories.\n   * @param {Array}   currentRules The list of fonts rules for the webpack configuration.\n   * @param {Target}  target       The target information.\n   * @param {Targets} targets      The targets service, to get the SSR targets information.\n   * @return {Array} The updated list of rules.\n   */\n  updateStylesRules(currentRules, target, targets) {\n    let updatedRules;\n    // If the target `framework` setting is the right one...\n    if (target.framework === this.frameworkProperty) {\n      // ...copy the list of rules.\n      updatedRules = currentRules.slice();\n      // Get the first rule of the list (there's usually only one).\n      const [mainRule] = updatedRules;\n      // Get the target framework options.\n      const options = this._getTargetOptions(target);\n      // If the `include` option is a list, keep it like that, otherwise, convert it into a list.\n      const include = Array.isArray(mainRule.include) ?\n        mainRule.include :\n        [mainRule.include];\n\n      // Loop all the possible SSR targets and add their paths to the `include` option.\n      include.push(...options.ssr.map((name) => (\n        new RegExp(targets.getTarget(name).folders.source)\n      )));\n\n      // Overwrite the rule `include` option.\n      mainRule.include = include;\n    } else {\n      // ...otherwise, just set to return the received rules.\n      updatedRules = currentRules;\n    }\n\n    // Return the updated rules.\n    return updatedRules;\n  }\n  /**\n   * This method gets called when projext reduces the fonts files rules of a target. It validates\n   * the target settings, and if the target implements SSR, it adds the `include` setting on\n   * the SVG rule for the SSR targets directories.\n   * @param {Array}   currentRules The list of fonts rules for the webpack configuration.\n   * @param {Target}  target       The target information.\n   * @param {Targets} targets      The targets service, to get the SSR targets information.\n   * @return {Array} The updated list of rules.\n   */\n  updateFontsRules(currentRules, target, targets) {\n    let updatedRules;\n    // If the target `framework` setting is the right one...\n    if (target.framework === this.frameworkProperty) {\n      // ...copy the list of rules.\n      updatedRules = currentRules.slice();\n      // Find the loader used for SVG files.\n      const svgLoader = updatedRules.find((rule) => '.svg'.match(rule.test));\n      // If the loader was found...\n      if (svgLoader) {\n        // ...get the target framework options.\n        const options = this._getTargetOptions(target);\n        // If the `include` option is a list, keep it like that, otherwise, convert it into a list.\n        const include = Array.isArray(svgLoader.include) ?\n          svgLoader.include :\n          [svgLoader.include];\n\n        // Loop all the possible SSR targets and add their _\"fonts path\"_ to the `include` option.\n        include.push(...options.ssr.map((name) => (\n          this._getTargetFontsRegExp(targets.getTarget(name))\n        )));\n\n        // Overwrite the SVG loder `include` option.\n        svgLoader.include = include;\n      }\n    } else {\n      // ...otherwise, just set to return the received rules.\n      updatedRules = currentRules;\n    }\n\n    // Return the updated rules.\n    return updatedRules;\n  }\n  /**\n   * This method gets called when projext reduces the images files rules of a target. It validates\n   * the target settings, and if the target implements SSR, it adds the `exclude` setting on\n   * the SVG rule for the SSR targets fonts directories.\n   * @param {Array}   currentRules The list of fonts rules for the webpack configuration.\n   * @param {Target}  target       The target information.\n   * @param {Targets} targets      The targets service, to get the SSR targets information.\n   * @return {Array} The updated list of rules.\n   */\n  updateImagesRules(currentRules, target, targets) {\n    let updatedRules;\n    // If the target `framework` setting is the right one...\n    if (target.framework === this.frameworkProperty) {\n      // ...copy the list of rules.\n      updatedRules = currentRules.slice();\n      // Find the loader used for SVG files.\n      const svgLoader = updatedRules.find((rule) => '.svg'.match(rule.test));\n      // If the loader was found...\n      if (svgLoader) {\n        // ...get the target framework options.\n        const options = this._getTargetOptions(target);\n        // If the `exclude` option is a list, keep it like that, otherwise, convert it into a list.\n        const exclude = Array.isArray(svgLoader.exclude) ?\n          svgLoader.exclude :\n          [svgLoader.exclude];\n\n        // Loop all the possible SSR targets and add their _\"fonts path\"_ to the `exclude` option.\n        exclude.push(...options.ssr.map((name) => (\n          this._getTargetFontsRegExp(targets.getTarget(name))\n        )));\n\n        // Overwrite the SVG loder `exclude` option.\n        svgLoader.exclude = exclude;\n      }\n    } else {\n      // ...otherwise, just set to return the received rules.\n      updatedRules = currentRules;\n    }\n\n    // Return the updated rules.\n    return updatedRules;\n  }\n  /**\n   * This method gets called when projext reduces a target configuration for Wepack. It validates\n   * the target settings and if HMR is enabled, it updates the `entry` setting with the required\n   * changes for the React Hot Loader.\n   * @param {Object} currentConfiguration The current configuration for the target.\n   * @param {Target} target               The target information.\n   * @return {Object} The updated configuration.\n   */\n  updateTargetConfiguration(currentConfiguration, target) {\n    let updatedConfiguration;\n    // If the target `framework` and `hot` have the required values...\n    if (target.framework === this.frameworkProperty && target.hot) {\n      // Copy the configuration.\n      updatedConfiguration = Object.assign({}, currentConfiguration);\n      // Update the `publicPath`, required by the loader.\n      updatedConfiguration.output.publicPath = '/';\n      // Get target entry name.\n      const [entryName] = Object.keys(updatedConfiguration.entry);\n      // Get the list of entries for the target.\n      const entries = updatedConfiguration.entry[entryName];\n      // Check if the `babel-polyfill` is present, since it always needs to be first.\n      const polyfillIndex = entries.indexOf('babel-polyfill');\n      // If the `babel-polyfill` is present...\n      if (polyfillIndex > -1) {\n        // ...push the required entry after it.\n        entries.splice(polyfillIndex + 1, 0, this.hotEntry);\n      } else {\n        // ...push the required entry as the first item.\n        entries.unshift(this.hotEntry);\n      }\n    } else {\n      // ...otherwise, just set to return the received configuration.\n      updatedConfiguration = currentConfiguration;\n    }\n\n    return updatedConfiguration;\n  }\n  /**\n   * Merge the default framework options with the overwrites the target may have, and return the\n   * dictionary with the _\"final options\"_, ready to use.\n   * @param {Target} target The target information.\n   * @return {Object}\n   * @ignore\n   * @access protected\n   */\n  _getTargetOptions(target) {\n    return Object.assign(\n      {},\n      this.frameworkOptions,\n      target.frameworkOptions || {}\n    );\n  }\n  /**\n   * Gets the RegExp for a fonts folder inside a given target source directory. This is used on\n   * the fonts SVG loader to `include` the files and on the images SVG loader to `exclude` them,\n   * that way SVG files inside a folder that matches the RegExp get handled as fonts and if they\n   * don't match it, they get handled as images.\n   * @param {Target} target The target information.\n   * @return {RegExp}\n   * @ignore\n   * @access protected\n   */\n  _getTargetFontsRegExp(target) {\n    return new RegExp(`${target.paths.source}/(?:.*?/)?fonts/.*?`, 'i');\n  }\n  /**\n   * Finds the index of the Babel loader on a list of loaders.\n   * @param {Array} loaders The list of loaders.\n   * @return {number}\n   * @ignore\n   * @access protected\n   */\n  _findBabelLoaderIndex(loaders) {\n    return loaders.findIndex((loader) => {\n      const isString = typeof loader === 'string';\n      return (isString && loader === this.babelLoaderName) ||\n        (!isString && loader.loader === this.babelLoaderName);\n    });\n  }\n  /**\n   * Updates an existing Babel loader configuration with the required presets and plugins to work\n   * with React code.\n   * The method will only modify the loader if is not on a string format and has an `options`\n   * object.\n   * @param {Object|string} babelLoader The loader to update.\n   * @param {boolean}       hot         Whether or not the target will run with HMR. This will\n   *                                    make the method disable the `modules` feature as is a\n   *                                    requirement of the React Hot Loader for it to be `false`.\n   * @return {Object|string}\n   * @ignore\n   * @access protected\n   */\n  _updateBabelLoader(babelLoader, hot) {\n    let updatedLoader;\n    /**\n     * If the loader is a `string` or it doesn't have an `options` property, then the project uses\n     * an external `.babelrc`, so it won't be updated.\n     */\n    if (typeof babelLoader !== 'string' && babelLoader.options) {\n      // Copy the loader reference.\n      updatedLoader = Object.assign({}, babelLoader);\n      // Access the loader options.\n      const { options } = updatedLoader;\n      // If it doesn't have a presets list, create it.\n      if (!options.presets) {\n        options.presets = [];\n      }\n      // Push the required preset.\n      options.presets.push([this.presetName]);\n      // If the target will run with HMR...\n      if (hot) {\n        // If it doesn't have a plugins list, create it.\n        if (!options.plugins) {\n          options.plugins = [];\n        }\n        // Push the required plugin.\n        options.plugins.push([this.hotPluginName]);\n        // Get the index of the `env` preset, in order to disable `modules`.\n        const envPresetIndex = options.presets.findIndex((preset) => {\n          const [presetName] = preset;\n          return presetName === 'env';\n        });\n        // If the `env` preset is present...\n        if (envPresetIndex > -1) {\n          // Get the `env` preset options.\n          const [, envPresetOptions] = options.presets[envPresetIndex];\n          // Disable `modules`.\n          envPresetOptions.modules = false;\n        }\n      }\n    } else {\n      updatedLoader = babelLoader;\n    }\n\n    return updatedLoader;\n  }\n}\n\nmodule.exports = ProjextReactPlugin;\n",
    "static": true,
    "longname": "/Users/homer0/CODE/Node/projext/projext-plugin-webpack-react/src/plugin.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 51,
    "kind": "class",
    "name": "ProjextReactPlugin",
    "memberof": "src/plugin.js",
    "static": true,
    "longname": "src/plugin.js~ProjextReactPlugin",
    "access": "public",
    "export": true,
    "importPath": "projext-plugin-webpack-react/src/plugin.js",
    "importStyle": "ProjextReactPlugin",
    "description": "This service is in charge of modifying a target Babel and entry settings in order to build\nReact code. It also manages the settings related to the React Hot Loader.",
    "lineNumber": 5,
    "interface": false
  },
  {
    "__docId__": 52,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/plugin.js~ProjextReactPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin.js~ProjextReactPlugin#constructor",
    "access": "public",
    "description": "Class constructor.",
    "lineNumber": 10,
    "ignore": true
  },
  {
    "__docId__": 53,
    "kind": "member",
    "name": "jsRulesEvent",
    "memberof": "src/plugin.js~ProjextReactPlugin",
    "static": false,
    "longname": "src/plugin.js~ProjextReactPlugin#jsRulesEvent",
    "access": "public",
    "description": "The name of the reducer event the service will listen in order to intercept the rules for\nJS files and update them.",
    "lineNumber": 16,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 54,
    "kind": "member",
    "name": "scssRulesEvent",
    "memberof": "src/plugin.js~ProjextReactPlugin",
    "static": false,
    "longname": "src/plugin.js~ProjextReactPlugin#scssRulesEvent",
    "access": "public",
    "description": "The name of the reducer event the service will listen in order to intercept the rules for\nSCSS files and update them.",
    "lineNumber": 22,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 55,
    "kind": "member",
    "name": "cssRulesEvent",
    "memberof": "src/plugin.js~ProjextReactPlugin",
    "static": false,
    "longname": "src/plugin.js~ProjextReactPlugin#cssRulesEvent",
    "access": "public",
    "description": "The name of the reducer event the service will listen in order to intercept the rules for\ncss files and update them.",
    "lineNumber": 28,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 56,
    "kind": "member",
    "name": "fontsRulesEvent",
    "memberof": "src/plugin.js~ProjextReactPlugin",
    "static": false,
    "longname": "src/plugin.js~ProjextReactPlugin#fontsRulesEvent",
    "access": "public",
    "description": "The name of the reducer event the service will listen in order to intercept the rules for\nfonts files, and if the target implements SSR, update them.",
    "lineNumber": 34,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 57,
    "kind": "member",
    "name": "imagesRulesEvent",
    "memberof": "src/plugin.js~ProjextReactPlugin",
    "static": false,
    "longname": "src/plugin.js~ProjextReactPlugin#imagesRulesEvent",
    "access": "public",
    "description": "The name of the reducer event the service will listen in order to intercept the rules for\nimages files, and if the target implements SSR, update them.",
    "lineNumber": 40,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 58,
    "kind": "member",
    "name": "targetEventName",
    "memberof": "src/plugin.js~ProjextReactPlugin",
    "static": false,
    "longname": "src/plugin.js~ProjextReactPlugin#targetEventName",
    "access": "public",
    "description": "The name of the reducer event the service will listen for and use to update a target entry\nsettings if the target `hot` property is `true`.",
    "lineNumber": 46,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 59,
    "kind": "member",
    "name": "frameworkProperty",
    "memberof": "src/plugin.js~ProjextReactPlugin",
    "static": false,
    "longname": "src/plugin.js~ProjextReactPlugin#frameworkProperty",
    "access": "public",
    "description": "The required value a target `framework` setting needs to have in order for the service to\ntake action.",
    "lineNumber": 52,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 60,
    "kind": "member",
    "name": "frameworkOptions",
    "memberof": "src/plugin.js~ProjextReactPlugin",
    "static": false,
    "longname": "src/plugin.js~ProjextReactPlugin#frameworkOptions",
    "access": "public",
    "description": "The default values for the options a target can use to customize how the plugin works.",
    "lineNumber": 59,
    "properties": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "ssr",
        "description": "A list of other targets being used for SSR (Server Side Rendering) and\n                      which paths should be included by processing the JSX."
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 61,
    "kind": "member",
    "name": "presetName",
    "memberof": "src/plugin.js~ProjextReactPlugin",
    "static": false,
    "longname": "src/plugin.js~ProjextReactPlugin#presetName",
    "access": "public",
    "description": "The name of the Babel preset the service will insert into the targets configurations.",
    "lineNumber": 66,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 62,
    "kind": "member",
    "name": "hotPluginName",
    "memberof": "src/plugin.js~ProjextReactPlugin",
    "static": false,
    "longname": "src/plugin.js~ProjextReactPlugin#hotPluginName",
    "access": "public",
    "description": "The name of the Babel plugin the service will insert into the targets configurations if\nthe target `hot` property is `true`",
    "lineNumber": 72,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 63,
    "kind": "member",
    "name": "hotEntry",
    "memberof": "src/plugin.js~ProjextReactPlugin",
    "static": false,
    "longname": "src/plugin.js~ProjextReactPlugin#hotEntry",
    "access": "public",
    "description": "The name of the entry the service will insert into the target if the target `hot` property\nis `true`.",
    "lineNumber": 78,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 64,
    "kind": "member",
    "name": "babelLoaderName",
    "memberof": "src/plugin.js~ProjextReactPlugin",
    "static": false,
    "longname": "src/plugin.js~ProjextReactPlugin#babelLoaderName",
    "access": "public",
    "description": "The name of the loader with the Babel configurations.",
    "lineNumber": 83,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 65,
    "kind": "method",
    "name": "register",
    "memberof": "src/plugin.js~ProjextReactPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin.js~ProjextReactPlugin#register",
    "access": "public",
    "description": "This is the method called when the plugin is loaded by projext. It just gets the events service\nand registers the listeners for the reducer events that handle the JS rules, fonts rules,\nimages rules and target configuration.",
    "lineNumber": 91,
    "params": [
      {
        "nullable": null,
        "types": [
          "Projext"
        ],
        "spread": false,
        "optional": false,
        "name": "app",
        "description": "The projext main container."
      }
    ],
    "return": null
  },
  {
    "__docId__": 66,
    "kind": "method",
    "name": "updateJSRules",
    "memberof": "src/plugin.js~ProjextReactPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin.js~ProjextReactPlugin#updateJSRules",
    "access": "public",
    "description": "This method gets called when projext reduces the JS rules of a target. It validates the target\nsettings and makes the necessary modifications to the Babel loader configuration.",
    "lineNumber": 128,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "currentRules",
        "description": "The list of JS rules for the webpack configuration."
      },
      {
        "nullable": null,
        "types": [
          "Target"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "The target information."
      },
      {
        "nullable": null,
        "types": [
          "Targets"
        ],
        "spread": false,
        "optional": false,
        "name": "targets",
        "description": "The targets service, to get the information of targets the\n                              one being processed may need for SSR."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "The updated list of rules."
    }
  },
  {
    "__docId__": 67,
    "kind": "method",
    "name": "updateStylesRules",
    "memberof": "src/plugin.js~ProjextReactPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin.js~ProjextReactPlugin#updateStylesRules",
    "access": "public",
    "description": "This method gets called when projext reduces the stylesheet (for both SCSS and CSS) rules of a\ntarget. It validates the target settings, and if the target implements SSR, it adds the\n`include` setting on the rule for the SSR targets directories.",
    "lineNumber": 171,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "currentRules",
        "description": "The list of fonts rules for the webpack configuration."
      },
      {
        "nullable": null,
        "types": [
          "Target"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "The target information."
      },
      {
        "nullable": null,
        "types": [
          "Targets"
        ],
        "spread": false,
        "optional": false,
        "name": "targets",
        "description": "The targets service, to get the SSR targets information."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "The updated list of rules."
    }
  },
  {
    "__docId__": 68,
    "kind": "method",
    "name": "updateFontsRules",
    "memberof": "src/plugin.js~ProjextReactPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin.js~ProjextReactPlugin#updateFontsRules",
    "access": "public",
    "description": "This method gets called when projext reduces the fonts files rules of a target. It validates\nthe target settings, and if the target implements SSR, it adds the `include` setting on\nthe SVG rule for the SSR targets directories.",
    "lineNumber": 210,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "currentRules",
        "description": "The list of fonts rules for the webpack configuration."
      },
      {
        "nullable": null,
        "types": [
          "Target"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "The target information."
      },
      {
        "nullable": null,
        "types": [
          "Targets"
        ],
        "spread": false,
        "optional": false,
        "name": "targets",
        "description": "The targets service, to get the SSR targets information."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "The updated list of rules."
    }
  },
  {
    "__docId__": 69,
    "kind": "method",
    "name": "updateImagesRules",
    "memberof": "src/plugin.js~ProjextReactPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin.js~ProjextReactPlugin#updateImagesRules",
    "access": "public",
    "description": "This method gets called when projext reduces the images files rules of a target. It validates\nthe target settings, and if the target implements SSR, it adds the `exclude` setting on\nthe SVG rule for the SSR targets fonts directories.",
    "lineNumber": 252,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "currentRules",
        "description": "The list of fonts rules for the webpack configuration."
      },
      {
        "nullable": null,
        "types": [
          "Target"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "The target information."
      },
      {
        "nullable": null,
        "types": [
          "Targets"
        ],
        "spread": false,
        "optional": false,
        "name": "targets",
        "description": "The targets service, to get the SSR targets information."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "The updated list of rules."
    }
  },
  {
    "__docId__": 70,
    "kind": "method",
    "name": "updateTargetConfiguration",
    "memberof": "src/plugin.js~ProjextReactPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin.js~ProjextReactPlugin#updateTargetConfiguration",
    "access": "public",
    "description": "This method gets called when projext reduces a target configuration for Wepack. It validates\nthe target settings and if HMR is enabled, it updates the `entry` setting with the required\nchanges for the React Hot Loader.",
    "lineNumber": 293,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "currentConfiguration",
        "description": "The current configuration for the target."
      },
      {
        "nullable": null,
        "types": [
          "Target"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "The target information."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "The updated configuration."
    }
  },
  {
    "__docId__": 71,
    "kind": "method",
    "name": "_getTargetOptions",
    "memberof": "src/plugin.js~ProjextReactPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin.js~ProjextReactPlugin#_getTargetOptions",
    "access": "protected",
    "description": "Merge the default framework options with the overwrites the target may have, and return the\ndictionary with the _\"final options\"_, ready to use.",
    "lineNumber": 330,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "Target"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "The target information."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 72,
    "kind": "method",
    "name": "_getTargetFontsRegExp",
    "memberof": "src/plugin.js~ProjextReactPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin.js~ProjextReactPlugin#_getTargetFontsRegExp",
    "access": "protected",
    "description": "Gets the RegExp for a fonts folder inside a given target source directory. This is used on\nthe fonts SVG loader to `include` the files and on the images SVG loader to `exclude` them,\nthat way SVG files inside a folder that matches the RegExp get handled as fonts and if they\ndon't match it, they get handled as images.",
    "lineNumber": 347,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "Target"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "The target information."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "RegExp"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 73,
    "kind": "method",
    "name": "_findBabelLoaderIndex",
    "memberof": "src/plugin.js~ProjextReactPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin.js~ProjextReactPlugin#_findBabelLoaderIndex",
    "access": "protected",
    "description": "Finds the index of the Babel loader on a list of loaders.",
    "lineNumber": 357,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "loaders",
        "description": "The list of loaders."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 74,
    "kind": "method",
    "name": "_updateBabelLoader",
    "memberof": "src/plugin.js~ProjextReactPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin.js~ProjextReactPlugin#_updateBabelLoader",
    "access": "protected",
    "description": "Updates an existing Babel loader configuration with the required presets and plugins to work\nwith React code.\nThe method will only modify the loader if is not on a string format and has an `options`\nobject.",
    "lineNumber": 377,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "babelLoader",
        "description": "The loader to update."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "hot",
        "description": "Whether or not the target will run with HMR. This will\n                                   make the method disable the `modules` feature as is a\n                                   requirement of the React Hot Loader for it to be `false`."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object",
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 75,
    "kind": "file",
    "name": "src/typedef.js",
    "content": "/**\n * @external {Projext}\n * https://homer0.github.io/projext/class/src/app/index.js~Projext.html\n */\n\n/**\n * @external {Target}\n * https://homer0.github.io/projext/typedef/index.html#static-typedef-Target\n */\n\n/**\n * @external {Targets}\n * https://homer0.github.io/projext/class/src/services/targets/targets.js~Targets.html\n */\n",
    "static": true,
    "longname": "/Users/homer0/CODE/Node/projext/projext-plugin-webpack-react/src/typedef.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 76,
    "kind": "external",
    "name": "Projext",
    "externalLink": "https://homer0.github.io/projext/class/src/app/index.js~Projext.html",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~Projext",
    "access": "public",
    "description": ""
  },
  {
    "__docId__": 77,
    "kind": "external",
    "name": "Target",
    "externalLink": "https://homer0.github.io/projext/typedef/index.html#static-typedef-Target",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~Target",
    "access": "public",
    "description": ""
  },
  {
    "__docId__": 78,
    "kind": "external",
    "name": "Targets",
    "externalLink": "https://homer0.github.io/projext/class/src/services/targets/targets.js~Targets.html",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~Targets",
    "access": "public",
    "description": ""
  },
  {
    "kind": "index",
    "content": "# projext plugin for React on webpack\n\nAllows you to bundle a [React](https://reactjs.org/) project with [projext](https://yarnpkg.com/en/package/projext) using the [webpack](https://webpack.js.org) [build engine](https://yarnpkg.com/en/package/projext-plugin-webpack).\n\n## Introduction\n\n[projext](https://yarnpkg.com/en/package/projext) allows you to configure a project without adding specific settings for a module bundler, then you can decide which build engine to use. This plugin is meant to be used when you are bundling a [React](https://reactjs.org/) and you are using the [webpack](https://webpack.js.org) [build engine](https://yarnpkg.com/en/package/projext-plugin-webpack).\n\nIt adds the required presets to the [`babel-loader`](https://yarnpkg.com/en/package/babel-loader) configuration in order to handle [`JSX`](https://facebook.github.io/jsx/) code. It also takes care of modifying the webpack settings in order to implement the [`react-hot-loader`](https://yarnpkg.com/en/package/react-hot-loader) with both, the dev server and an [Express](https://expressjs.com)/[Jimpex](https://yarnpkg.com/en/package/jimpex) target.\n\n## Information\n\n| -            | -                                                                                      |\n|--------------|----------------------------------------------------------------------------------------|\n| Package      | projext-plugin-webpack-react.                                                          |\n| Description  | Allows you to bundle a React project with projext using the webpack build engine.      |\n| Node Version | >= v6.10.0                                                                             |\n\n## Usage\n\n1. You first need the build engine, so install [`projext-plugin-webpack`](https://yarnpkg.com/en/package/projext-plugin-webpack).\n2. If you changed it, set your target `engine` setting to `webpack`.\n3. Add a new setting to your target named `framework` and set its value to `react`.\n4. Done\n\nNow, when your target gets builded, the plugin will check if the target is using webpack and if the framework is React, then it will make the necessary changes to bundle the `JSX` code.\n\n### Server side rendering\n\n> Server side rendering (SSR) is when you render your application on the server (backend) as a string, serve it on the browser and then you app runs in order to add all the JS magic.\n\nLet's say you have a `backend` target with your Node server code, and a `frontend` target with your React code, and you want to require your `frontend` code on the `backend` in order to use `ReactDOM.renderToString(...)`:\n\nFor your `backend` target you'll have to define its `framework` property to `react`, so the plugin can include the JSX loader, and then add an extra option to enable SSR from `backend` to `frontend`:\n\n```js\nmodule.exports = {\n  targets: {\n    backend: {\n      type: 'node',\n      framework: 'react',\n      frameworkOptions: {\n        ssr: ['frontend'],\n      },\n    },\n  },\n};\n```\n\nThis new setting (`frameworkOptions.ssr`) is where you tell the plugin that the targets on that list should also have their JSX parsed for you to use on Node.\n\nDone, now you can `require`/`import` files from your `frontend` target on the `backend` target and everything will work.\n\n### Hot loader\n\n> If you don't know what hot reload is, you should probably watch [Dan Abramov's talk on Hot Reloading with Time Travel](https://www.youtube.com/watch?v=xsSnOQynTHs).\n\nTo enable this feature, you just need to set the target `hot` setting to `true`:\n\n```js\nmodule.exports = {\n  targets: {\n    myTarget: {\n      type: 'browser',\n      framework: 'react',\n      hot: true,\n    },\n  },\n};\n```\n\nAnd that's all there is, if you are running the target by itself, it will configure the hot loader settings for the webpack dev server; and if you are using a Node target, the configuration will be made for the hot middleware.\n\n> If you don't know how to implement the middlewares on your Express/Jimpex app, you can check [the `projext-plugin-webpack` documentation for it](https://homer0.github.io/projext-plugin-webpack/#middleware-implementation).\n\n### Babel\n\nThis plugin only adds a new loader when hot reload is enabled, but leaving that aside, the only thing it does is modify the [Babel](https://babeljs.io) configuration in order to add the required changes:\n\n- Presets: `react`\n- Plugins: `react-hot-loader/babel`\n- It disables the `modules` feature on the `env` preset.\n\n\nSo, if for some reason you are overwriting the configuration projext generates, instead of making sure you add those requirements, you should consider if you really need this plugin: The only advantage it can provide is the auto-configuration of the hot reload (which is kind of tricky :P), but if you are not using hot reload, you could just add the `react` preset when you overwrite the Babel configuration that would be all.\n\n## Development\n\nBefore doing anything, install the repository hooks:\n\n```bash\n# You can either use npm or yarn, it doesn't matter\nnpm run install-hooks\n```\n\n### NPM/Yarn Tasks\n\n| Task                    | Description                         |\n|-------------------------|-------------------------------------|\n| `npm run install-hooks` | Install the GIT repository hooks.   |\n| `npm test`              | Run the project unit tests.         |\n| `npm run lint`          | Lint the modified files.            |\n| `npm run lint:full`     | Lint the project code.              |\n| `npm run docs`          | Generate the project documentation. |\n\n### Testing\n\nI use [Jest](https://facebook.github.io/jest/) with [Jest-Ex](https://yarnpkg.com/en/package/jest-ex) to test the project. The configuration file is on `./.jestrc`, the tests and mocks are on `./tests` and the script that runs it is on `./utils/scripts/test`.\n\n### Linting\n\nI use [ESlint](http://eslint.org) to validate all our JS code. The configuration file for the project code is on `./.eslintrc` and for the tests on `./tests/.eslintrc` (which inherits from the one on the root), there's also an `./.eslintignore` to ignore some files on the process, and the script that runs it is on `./utils/scripts/lint`.\n\n### Documentation\n\nI use [ESDoc](http://esdoc.org) to generate HTML documentation for the project. The configuration file is on `./.esdocrc` and the script that runs it is on `./utils/scripts/docs`.\n",
    "longname": "/Users/homer0/CODE/Node/projext/projext-plugin-webpack-react/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n    \"name\": \"projext-plugin-webpack-react\",\n    \"description\": \"Allows you to bundle a React project with projext using the webpack build engine.\",\n    \"homepage\": \"https://homer0.github.io/projext-plugin-webpack-react/\",\n    \"version\": \"2.0.1\",\n    \"repository\": \"homer0/projext-plugin-webpack-react\",\n    \"author\": \"Leonardo Apiwan (@homer0) <me@homer0.com>\",\n    \"license\": \"MIT\",\n    \"dependencies\": {\n      \"babel-preset-react\": \"6.24.1\",\n      \"react-hot-loader\": \"4.0.1\"\n    },\n    \"peerDependencies\": {\n\n    },\n    \"devDependencies\": {\n      \"wootils\": \"^1.1.1\",\n      \"eslint\": \"4.16.0\",\n      \"eslint-config-airbnb-base\": \"12.1.0\",\n      \"eslint-plugin-import\": \"2.8.0\",\n      \"eslint-plugin-node\": \"5.2.1\",\n      \"babel-preset-env\": \"1.6.1\",\n      \"jest-ex\": \"4.0.0\",\n      \"jest-cli\": \"22.1.4\",\n      \"jasmine-expect\": \"3.8.3\",\n      \"esdoc\": \"1.0.4\",\n      \"esdoc-standard-plugin\": \"1.0.0\",\n      \"esdoc-node\": \"1.0.3\",\n      \"coveralls\": \"3.0.0\"\n    },\n    \"engine-strict\": true,\n    \"engines\": {\n      \"node\": \">=6.0.0\",\n      \"npm\": \">=3.0.0\"\n    },\n    \"main\": \"src/index.js\",\n    \"scripts\": {\n      \"install-hooks\": \"./utils/hooks/install\",\n      \"test\": \"./utils/scripts/test\",\n      \"lint\": \"./utils/scripts/lint\",\n      \"lint:full\": \"./utils/scripts/lint-full\",\n      \"docs\": \"./utils/scripts/docs\"\n    }\n}\n",
    "longname": "/Users/homer0/CODE/Node/projext/projext-plugin-webpack-react/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  }
]